// Console_CountNegNumsInSortM.cpp : 此檔案包含 'main' 函式。程式會於該處開始執行及結束執行。
//

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Solution{
public:

    int calcNumberInsertIndexBinarySearch(vector<int> &nums, int target){
        
        int left = 0;
        int right = nums.size() - 1;
        // printf("left:%d, right:%d\n", left, right);
        while (left <= right){
            int mid = left + (right - left) / 2;
            // printf("Loop, left:%d, right:%d, mid:%d, nums[mid]=%d, target:%d\n", left, right, mid, nums[mid], target);

            // beacuse of there is a repeated number and we have to find the smallest value in repeat number, so remark equal judgement case
            // if( target == nums[mid] )
            //     return mid;
            if (target <= nums[mid]) {
                right = mid - 1;
            }
            else if (target > nums[mid]) {
                left = mid + 1;
            }
        }
        // printf("End-Loop, left:%d, right:%d\n", left, right);
        return left;
    }

    int countNegatives(vector<vector<int>> &grid){

        // solution 1 (keven, best)
        {
            // STEP1: sort array first
            for (size_t i = 0; i < grid.size(); i++)
            {
                sort(grid[i].begin(), grid[i].end());
            }
            
            // STEP2: count the insert index for element 0, this index is also represent the counts low than 0
            int result = 0;

            for(int i = 0; i < grid.size(); i++){
                auto singleResult = calcNumberInsertIndexBinarySearch(grid[i], 0);
                result += singleResult;
                // printf("i:%d, singleResult:%d, result:%d\n", i, singleResult, result);
            }

            return result;
        }
    }
};

int main()
{
    std::cout << "Hello LeetCode - Counts Negative Numbers In a Sorted Matrix, Algorithm (Binary Search, Array)!\n";

    printf("LeetCode - 1351. Counts Negative Numbers In a Sorted Matrix\n");
    cout << "https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix" << endl << endl;
    // cout << "solution: https://medium.com/@zero.ling/c-sort-a-map-by-value-601a60ec0e01" << endl;

    printf("*****************************************************\n");
    printf("************* testcase 1 ****************************\n");
    printf("input: grid = [[4, 3, 2, -1],[3, 2, 1, -1],[1, 1, -1, -2],[-1, -1, -2, -3]]\n");
    printf("expected result: 8\n");
    {

        Solution solution;
        vector<vector<int>> grid{ {4, 3, 2, -1},{3, 2, 1, -1},{1, 1, -1, -2},{-1, -1, -2, -3} };
        
        auto counts = solution.countNegatives(grid);
        printf("Result:%d\n", counts);
    }
    printf("*****************************************************\n");

    printf("\n\n");

    printf("*****************************************************\n");
    printf("************* testcase 2 ****************************\n");
    printf("input: grid = [[3, 2],[1, 0]]\n");
    printf("expected result: 0\n");
    {

        Solution solution;
        vector<vector<int>> grid{ {3, 2},{1, 0} };
        
        auto counts = solution.countNegatives(grid);
        printf("Result:%d\n", counts);
    }
    printf("*****************************************************\n");

    printf("\n\n");

    printf("*****************************************************\n");
    printf("************* testcase 3 ****************************\n");
    printf("input: grid = [[11,10,9,8,7,6,5,4,3,3,3,3,3,3,2,1,1,1,0,0,0,-1,-2,-2,-3,-4,-15,-15,-15],[10,9,9,7,6,5,5,4,2,-8,-9,-10,-11,-11,-12,-13,-13,-13,-13,-14,-14,-15,-15,-16,-16,-16,-16,-17,-17],[9,3,3,3,3,2,-17,-18,-19,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[8,3,3,-9,-10,-10,-17,-18,-19,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[8,3,2,-9,-10,-11,-17,-19,-19,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[7,3,1,-10,-11,-11,-17,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[7,3,0,-11,-11,-11,-17,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[7,2,0,-12,-12,-12,-17,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[6,1,0,-12,-13,-13,-17,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[6,1,0,-12,-13,-13,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[5,1,-1,-12,-13,-14,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[4,1,-1,-12,-13,-14,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[4,0,-2,-12,-14,-15,-19,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[4,0,-3,-13,-15,-15,-19,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[3,-1,-3,-13,-15,-15,-19,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[3,-1,-3,-13,-16,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[2,-1,-4,-13,-16,-19,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[2,-1,-5,-14,-16,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[2,-1,-5,-15,-17,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[1,-1,-6,-15,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[1,-1,-6,-16,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[1,-1,-7,-17,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[1,-2,-8,-17,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[1,-2,-9,-17,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20],[0,-2,-10,-17,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20]]\n");
    printf("expected result: 649\n");
    {

        Solution solution;
        vector<vector<int>> grid{ {11,10,9,8,7,6,5,4,3,3,3,3,3,3,2,1,1,1,0,0,0,-1,-2,-2,-3,-4,-15,-15,-15},
                                  {10,9,9,7,6,5,5,4,2,-8,-9,-10,-11,-11,-12,-13,-13,-13,-13,-14,-14,-15,-15,-16,-16,-16,-16,-17,-17},
                                  {9,3,3,3,3,2,-17,-18,-19,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {8,3,3,-9,-10,-10,-17,-18,-19,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {8,3,2,-9,-10,-11,-17,-19,-19,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {7,3,1,-10,-11,-11,-17,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {7,3,0,-11,-11,-11,-17,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {7,2,0,-12,-12,-12,-17,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {6,1,0,-12,-13,-13,-17,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {6,1,0,-12,-13,-13,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {5,1,-1,-12,-13,-14,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {4,1,-1,-12,-13,-14,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {4,0,-2,-12,-14,-15,-19,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {4,0,-3,-13,-15,-15,-19,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {3,-1,-3,-13,-15,-15,-19,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {3,-1,-3,-13,-16,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {2,-1,-4,-13,-16,-19,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {2,-1,-5,-14,-16,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {2,-1,-5,-15,-17,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {1,-1,-6,-15,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {1,-1,-6,-16,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {1,-1,-7,-17,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {1,-2,-8,-17,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {1,-2,-9,-17,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20},
                                  {0,-2,-10,-17,-18,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20,-20}};
        
        auto counts = solution.countNegatives(grid);
        printf("Result:%d\n", counts);
    }
    printf("*****************************************************\n");

    printf("\n\n");
}

// 執行程式: Ctrl + F5 或 [偵錯] > [啟動但不偵錯] 功能表
// 偵錯程式: F5 或 [偵錯] > [啟動偵錯] 功能表

// 開始使用的提示: 
//   1. 使用 [方案總管] 視窗，新增/管理檔案
//   2. 使用 [Team Explorer] 視窗，連線到原始檔控制
//   3. 使用 [輸出] 視窗，參閱組建輸出與其他訊息
//   4. 使用 [錯誤清單] 視窗，檢視錯誤
//   5. 前往 [專案] > [新增項目]，建立新的程式碼檔案，或是前往 [專案] > [新增現有項目]，將現有程式碼檔案新增至專案
//   6. 之後要再次開啟此專案時，請前往 [檔案] > [開啟] > [專案]，然後選取 .sln 檔案
